
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000758  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000007cc  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000b8  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000010f  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b62  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b6  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aba  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000333  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b25  00000000  00000000  00002ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000e1  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00003ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
   2:	00 00       	nop
   4:	00 c1       	rjmp	.+512    	; 0x206 <__bad_interrupt>
   6:	00 00       	nop
   8:	fe c0       	rjmp	.+508    	; 0x206 <__bad_interrupt>
   a:	00 00       	nop
   c:	fc c0       	rjmp	.+504    	; 0x206 <__bad_interrupt>
   e:	00 00       	nop
  10:	fa c0       	rjmp	.+500    	; 0x206 <__bad_interrupt>
  12:	00 00       	nop
  14:	f8 c0       	rjmp	.+496    	; 0x206 <__bad_interrupt>
  16:	00 00       	nop
  18:	f6 c0       	rjmp	.+492    	; 0x206 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f4 c0       	rjmp	.+488    	; 0x206 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f2 c0       	rjmp	.+484    	; 0x206 <__bad_interrupt>
  22:	00 00       	nop
  24:	f0 c0       	rjmp	.+480    	; 0x206 <__bad_interrupt>
  26:	00 00       	nop
  28:	eb c1       	rjmp	.+982    	; 0x400 <__vector_10>
  2a:	00 00       	nop
  2c:	28 c2       	rjmp	.+1104   	; 0x47e <__vector_11>
  2e:	00 00       	nop
  30:	ea c0       	rjmp	.+468    	; 0x206 <__bad_interrupt>
  32:	00 00       	nop
  34:	e8 c0       	rjmp	.+464    	; 0x206 <__bad_interrupt>
  36:	00 00       	nop
  38:	e6 c0       	rjmp	.+460    	; 0x206 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e4 c0       	rjmp	.+456    	; 0x206 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e2 c0       	rjmp	.+452    	; 0x206 <__bad_interrupt>
  42:	00 00       	nop
  44:	e0 c0       	rjmp	.+448    	; 0x206 <__bad_interrupt>
  46:	00 00       	nop
  48:	de c0       	rjmp	.+444    	; 0x206 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	dc c0       	rjmp	.+440    	; 0x206 <__bad_interrupt>
  4e:	00 00       	nop
  50:	da c0       	rjmp	.+436    	; 0x206 <__bad_interrupt>
  52:	00 00       	nop
  54:	d8 c0       	rjmp	.+432    	; 0x206 <__bad_interrupt>
  56:	00 00       	nop
  58:	d6 c0       	rjmp	.+428    	; 0x206 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d4 c0       	rjmp	.+424    	; 0x206 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d2 c0       	rjmp	.+420    	; 0x206 <__bad_interrupt>
  62:	00 00       	nop
  64:	d0 c0       	rjmp	.+416    	; 0x206 <__bad_interrupt>
  66:	00 00       	nop
  68:	ce c0       	rjmp	.+412    	; 0x206 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	cc c0       	rjmp	.+408    	; 0x206 <__bad_interrupt>
  6e:	00 00       	nop
  70:	ca c0       	rjmp	.+404    	; 0x206 <__bad_interrupt>
  72:	00 00       	nop
  74:	c8 c0       	rjmp	.+400    	; 0x206 <__bad_interrupt>
  76:	00 00       	nop
  78:	c6 c0       	rjmp	.+396    	; 0x206 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c4 c0       	rjmp	.+392    	; 0x206 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c2 c0       	rjmp	.+388    	; 0x206 <__bad_interrupt>
  82:	00 00       	nop
  84:	c0 c0       	rjmp	.+384    	; 0x206 <__bad_interrupt>
  86:	00 00       	nop
  88:	be c0       	rjmp	.+380    	; 0x206 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bc c0       	rjmp	.+376    	; 0x206 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ba c0       	rjmp	.+372    	; 0x206 <__bad_interrupt>
  92:	00 00       	nop
  94:	b8 c0       	rjmp	.+368    	; 0x206 <__bad_interrupt>
  96:	00 00       	nop
  98:	b6 c0       	rjmp	.+364    	; 0x206 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b4 c0       	rjmp	.+360    	; 0x206 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b2 c0       	rjmp	.+356    	; 0x206 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b0 c0       	rjmp	.+352    	; 0x206 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ae c0       	rjmp	.+348    	; 0x206 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <morse_code_table>:
  ac:	42 84 a4 83 01 24 c3 04 02 74 a3 44 c2 82 e3 64     B....$...t.D...d
  bc:	d4 43 03 81 23 14 63 94 b4 c4                       .C..#.c...

000000c6 <__c.1594>:
  c6:	0a 00                                               ..

000000c8 <__c.1583>:
  c8:	0a 00                                               ..

000000ca <__c.1578>:
  ca:	20 64 69 74 00                                       dit.

000000cf <__c.1576>:
  cf:	20 64 61 68 00                                       dah.

000000d4 <__c.1571>:
  d4:	43 68 61 72 20 00                                   Char .

000000da <__c.1569>:
  da:	0a 00                                               ..

000000dc <__c.1567>:
  dc:	4f 70 70 73 2c 20 75 6e 73 75 70 70 6f 72 74 65     Opps, unsupporte
  ec:	64 20 63 68 61 72 61 63 74 65 72 3a 20 00           d character: .

000000fa <__c.1565>:
  fa:	53 70 61 63 65 0a 00                                Space..

00000101 <__c.1557>:
 101:	44 4f 45 53 20 41 4e 59 42 4f 44 59 20 53 54 49     DOES ANYBODY STI
 111:	4c 4c 20 4b 4e 4f 57 20 4d 4f 52 53 45 20 43 4f     LL KNOW MORSE CO
 121:	44 45 3f 00                                         DE?.

00000125 <__c.1552>:
 125:	53 4f 53 00                                         SOS.

00000129 <descriptor_list>:
 129:	00 01 00 00 60 01 12 00 02 00 00 72 01 22 00 22     ....`......r."."
 139:	00 00 94 01 15 00 21 00 00 84 01 09 00 03 00 00     ......!.........
 149:	a9 01 04 01 03 09 04 ad 01 14 02 03 09 04 c3 01     ................
 159:	20                                                   

0000015a <endpoint_config_table>:
 15a:	00 00 01 c1 26 00                                   ....&.

00000160 <device_descriptor>:
 160:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 170:	00 01                                               ..

00000172 <config1_descriptor>:
 172:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 182:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 192:	00 01                                               ..

00000194 <hid_report_descriptor>:
 194:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1a4:	09 75 81 02 c0                                      .u...

000001a9 <string0>:
 1a9:	04 03 09 04                                         ....

000001ad <string1>:
 1ad:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1bd:	6d 00 65 00 00 00                                   m.e...

000001c3 <string2>:
 1c3:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 1d3:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 1e3:	00 00 00                                            ...

000001e6 <__ctors_end>:
 1e6:	11 24       	eor	r1, r1
 1e8:	1f be       	out	0x3f, r1	; 63
 1ea:	cf ef       	ldi	r28, 0xFF	; 255
 1ec:	da e0       	ldi	r29, 0x0A	; 10
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_clear_bss>:
 1f2:	11 e0       	ldi	r17, 0x01	; 1
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
 1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
 1fc:	a3 30       	cpi	r26, 0x03	; 3
 1fe:	b1 07       	cpc	r27, r17
 200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
 202:	74 d0       	rcall	.+232    	; 0x2ec <main>
 204:	a7 c2       	rjmp	.+1358   	; 0x754 <_exit>

00000206 <__bad_interrupt>:
 206:	fc ce       	rjmp	.-520    	; 0x0 <__vectors>

00000208 <morse_character>:
	}
}

// blink a single character in Morse code
void morse_character(char c)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	18 2f       	mov	r17, r24
	unsigned char code, count;

	if (c == ' ') {
 20e:	80 32       	cpi	r24, 0x20	; 32
 210:	59 f4       	brne	.+22     	; 0x228 <morse_character+0x20>
		print("Space\n");
 212:	8a ef       	ldi	r24, 0xFA	; 250
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	8a d2       	rcall	.+1300   	; 0x72c <print_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	97 e5       	ldi	r25, 0x57	; 87
 21c:	ab e1       	ldi	r26, 0x1B	; 27
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	a0 40       	sbci	r26, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <morse_character+0x16>
 226:	4d c0       	rjmp	.+154    	; 0x2c2 <morse_character+0xba>
		_delay_ms(DIT * 7);
		return;
	}
	if (c < 'A' || c > 'Z') {
 228:	81 54       	subi	r24, 0x41	; 65
 22a:	8a 31       	cpi	r24, 0x1A	; 26
 22c:	48 f0       	brcs	.+18     	; 0x240 <morse_character+0x38>
		print("Opps, unsupported character: ");
 22e:	8c ed       	ldi	r24, 0xDC	; 220
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	7c d2       	rcall	.+1272   	; 0x72c <print_P>
		pchar(c);
 234:	81 2f       	mov	r24, r17
 236:	9e d0       	rcall	.+316    	; 0x374 <usb_debug_putchar>
		print("\n");
 238:	8a ed       	ldi	r24, 0xDA	; 218
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	77 d2       	rcall	.+1262   	; 0x72c <print_P>
		return;	
 23e:	43 c0       	rjmp	.+134    	; 0x2c6 <morse_character+0xbe>
	}
	print("Char ");
 240:	84 ed       	ldi	r24, 0xD4	; 212
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	73 d2       	rcall	.+1254   	; 0x72c <print_P>
	pchar(c);
 246:	81 2f       	mov	r24, r17
 248:	95 d0       	rcall	.+298    	; 0x374 <usb_debug_putchar>
	pchar(':');
 24a:	8a e3       	ldi	r24, 0x3A	; 58
 24c:	93 d0       	rcall	.+294    	; 0x374 <usb_debug_putchar>
	code = pgm_read_byte(morse_code_table + (c - 'A'));
 24e:	e1 2f       	mov	r30, r17
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	e5 59       	subi	r30, 0x95	; 149
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	14 91       	lpm	r17, Z+
	for (count = code & 0x07; count > 0; count--) {
 258:	01 2f       	mov	r16, r17
 25a:	07 70       	andi	r16, 0x07	; 7
 25c:	26 c0       	rjmp	.+76     	; 0x2aa <morse_character+0xa2>
		LED_ON;
 25e:	5e 9a       	sbi	0x0b, 6	; 11
		if (code & 0x80) {
 260:	17 ff       	sbrs	r17, 7
 262:	0b c0       	rjmp	.+22     	; 0x27a <morse_character+0x72>
			print(" dah");
 264:	8f ec       	ldi	r24, 0xCF	; 207
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	61 d2       	rcall	.+1218   	; 0x72c <print_P>
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	97 eb       	ldi	r25, 0xB7	; 183
 26e:	ab e0       	ldi	r26, 0x0B	; 11
 270:	81 50       	subi	r24, 0x01	; 1
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	a0 40       	sbci	r26, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <morse_character+0x68>
 278:	0a c0       	rjmp	.+20     	; 0x28e <morse_character+0x86>
			_delay_ms(DIT * 3);
		} else {
			print(" dit");
 27a:	8a ec       	ldi	r24, 0xCA	; 202
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	56 d2       	rcall	.+1196   	; 0x72c <print_P>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	97 ee       	ldi	r25, 0xE7	; 231
 284:	a3 e0       	ldi	r26, 0x03	; 3
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <morse_character+0x7e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <morse_character+0x88>
 290:	00 00       	nop
			_delay_ms(DIT);
		}
		LED_OFF;
 292:	5e 98       	cbi	0x0b, 6	; 11
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	97 ee       	ldi	r25, 0xE7	; 231
 298:	a3 e0       	ldi	r26, 0x03	; 3
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <morse_character+0x92>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <morse_character+0x9c>
 2a4:	00 00       	nop
		_delay_ms(DIT);
		code = code << 1;
 2a6:	11 0f       	add	r17, r17
	}
	print("Char ");
	pchar(c);
	pchar(':');
	code = pgm_read_byte(morse_code_table + (c - 'A'));
	for (count = code & 0x07; count > 0; count--) {
 2a8:	01 50       	subi	r16, 0x01	; 1
 2aa:	00 23       	and	r16, r16
 2ac:	c1 f6       	brne	.-80     	; 0x25e <morse_character+0x56>
		}
		LED_OFF;
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
 2ae:	88 ec       	ldi	r24, 0xC8	; 200
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	3c d2       	rcall	.+1144   	; 0x72c <print_P>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	9f ec       	ldi	r25, 0xCF	; 207
 2b8:	a7 e0       	ldi	r26, 0x07	; 7
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	a0 40       	sbci	r26, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <morse_character+0xb2>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <morse_character+0xbc>
 2c4:	00 00       	nop
	_delay_ms(DIT * 2);
}
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <morse_P>:

// blink an entire message in Morse code
// the string must be in flash memory (using PSTR macro)
void morse_P(const char *s)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
 2d2:	fe 01       	movw	r30, r28
	char c;
	
	while (1) {
		c = pgm_read_byte(s++);
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	84 91       	lpm	r24, Z+
		if (!c) break;
 2d8:	88 23       	and	r24, r24
 2da:	11 f0       	breq	.+4      	; 0x2e0 <morse_P+0x14>
		morse_character(c);
 2dc:	95 df       	rcall	.-214    	; 0x208 <morse_character>
	}
 2de:	f9 cf       	rjmp	.-14     	; 0x2d2 <morse_P+0x6>
	print("\n");
 2e0:	86 ec       	ldi	r24, 0xC6	; 198
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	23 d2       	rcall	.+1094   	; 0x72c <print_P>
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <main>:
void morse_P(const char *s);
const unsigned char morse_code_table[];


int main(void)
{
 2ec:	1f 93       	push	r17
	unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	80 93 61 00 	sts	0x0061, r24
 2f4:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
 2f8:	56 9a       	sbi	0x0a, 6	; 10
	LED_OFF;
 2fa:	5e 98       	cbi	0x0b, 6	; 11

	// initialize the USB, but don't want for the host to
	// configure.  The first several messages sent will be
	// lost because the PC hasn't configured the USB yet,
	// but we care more about blinking than debug messages!
	usb_init();
 2fc:	24 d0       	rcall	.+72     	; 0x346 <usb_init>

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	0d c0       	rjmp	.+26     	; 0x31c <main+0x30>
			morse_P(PSTR("SOS"));
 302:	85 e2       	ldi	r24, 0x25	; 37
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	e2 df       	rcall	.-60     	; 0x2cc <morse_P>
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9d e3       	ldi	r25, 0x3D	; 61
 30c:	a9 e4       	ldi	r26, 0x49	; 73
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	a0 40       	sbci	r26, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x22>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x2c>
 318:	00 00       	nop
	// but we care more about blinking than debug messages!
	usb_init();

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 31a:	1f 5f       	subi	r17, 0xFF	; 255
 31c:	16 30       	cpi	r17, 0x06	; 6
 31e:	88 f3       	brcs	.-30     	; 0x302 <main+0x16>
			morse_P(PSTR("SOS"));
			_delay_ms(1500);
		}
		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	d3 df       	rcall	.-90     	; 0x2cc <morse_P>
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	9f e4       	ldi	r25, 0x4F	; 79
 32a:	a3 ec       	ldi	r26, 0xC3	; 195
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	a0 40       	sbci	r26, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x40>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x4a>
 336:	00 00       	nop
	// but we care more about blinking than debug messages!
	usb_init();

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 338:	10 e0       	ldi	r17, 0x00	; 0
 33a:	e3 cf       	rjmp	.-58     	; 0x302 <main+0x16>

0000033c <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 33c:	80 91 e8 00 	lds	r24, 0x00E8
 340:	80 ff       	sbrs	r24, 0
 342:	fc cf       	rjmp	.-8      	; 0x33c <usb_wait_in_ready>
}
 344:	08 95       	ret

00000346 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 352:	82 e1       	ldi	r24, 0x12	; 18
 354:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 356:	09 b4       	in	r0, 0x29	; 41
 358:	00 fe       	sbrs	r0, 0
 35a:	fd cf       	rjmp	.-6      	; 0x356 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 35c:	80 e9       	ldi	r24, 0x90	; 144
 35e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 362:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 366:	10 92 00 01 	sts	0x0100, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 370:	78 94       	sei
}
 372:	08 95       	ret

00000374 <usb_debug_putchar>:
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 374:	90 91 00 01 	lds	r25, 0x0100
 378:	99 23       	and	r25, r25
 37a:	09 f4       	brne	.+2      	; 0x37e <usb_debug_putchar+0xa>
 37c:	3d c0       	rjmp	.+122    	; 0x3f8 <usb_debug_putchar+0x84>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 37e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 380:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 382:	23 e0       	ldi	r18, 0x03	; 3
 384:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 388:	20 91 02 01 	lds	r18, 0x0102
 38c:	22 23       	and	r18, r18
 38e:	41 f0       	breq	.+16     	; 0x3a0 <usb_debug_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 390:	20 91 e8 00 	lds	r18, 0x00E8
 394:	25 fd       	sbrc	r18, 5
 396:	02 c0       	rjmp	.+4      	; 0x39c <usb_debug_putchar+0x28>
			SREG = intr_state;
 398:	9f bf       	out	0x3f, r25	; 63
 39a:	2e c0       	rjmp	.+92     	; 0x3f8 <usb_debug_putchar+0x84>
			return -1;
		}
		previous_timeout = 0;
 39c:	10 92 02 01 	sts	0x0102, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 3a0:	20 91 e4 00 	lds	r18, 0x00E4
 3a4:	2c 5f       	subi	r18, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 3a6:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 3a8:	40 91 e8 00 	lds	r20, 0x00E8
 3ac:	45 fd       	sbrc	r20, 5
 3ae:	12 c0       	rjmp	.+36     	; 0x3d4 <usb_debug_putchar+0x60>
		SREG = intr_state;
 3b0:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 3b2:	90 91 e4 00 	lds	r25, 0x00E4
 3b6:	92 17       	cp	r25, r18
 3b8:	21 f4       	brne	.+8      	; 0x3c2 <usb_debug_putchar+0x4e>
			previous_timeout = 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 02 01 	sts	0x0102, r24
 3c0:	1b c0       	rjmp	.+54     	; 0x3f8 <usb_debug_putchar+0x84>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3c2:	90 91 00 01 	lds	r25, 0x0100
 3c6:	99 23       	and	r25, r25
 3c8:	c9 f0       	breq	.+50     	; 0x3fc <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 3ca:	9f b7       	in	r25, 0x3f	; 63
		cli();
 3cc:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 3ce:	30 93 e9 00 	sts	0x00E9, r19
	}
 3d2:	ea cf       	rjmp	.-44     	; 0x3a8 <usb_debug_putchar+0x34>
	// actually write the byte into the FIFO
	UEDATX = c;
 3d4:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 3d8:	80 91 e8 00 	lds	r24, 0x00E8
 3dc:	85 fd       	sbrc	r24, 5
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <usb_debug_putchar+0x78>
		UEINTX = 0x3A;
 3e0:	8a e3       	ldi	r24, 0x3A	; 58
 3e2:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 3e6:	10 92 01 01 	sts	0x0101, r1
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <usb_debug_putchar+0x7e>
	} else {
		debug_flush_timer = 2;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	80 93 01 01 	sts	0x0101, r24
	}
	SREG = intr_state;
 3f2:	9f bf       	out	0x3f, r25	; 63
	return 0;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	08 95       	ret
		if (UDFNUML == timeout) {
			previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		debug_flush_timer = 2;
	}
	SREG = intr_state;
	return 0;
}
 3fe:	08 95       	ret

00000400 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 40e:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 412:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 416:	83 ff       	sbrs	r24, 3
 418:	0f c0       	rjmp	.+30     	; 0x438 <__vector_10+0x38>
		UENUM = 0;
 41a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 424:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 428:	92 e2       	ldi	r25, 0x22	; 34
 42a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 42e:	98 e0       	ldi	r25, 0x08	; 8
 430:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 434:	10 92 00 01 	sts	0x0100, r1
        }
	if (intbits & (1<<SOFI)) {
 438:	82 ff       	sbrs	r24, 2
 43a:	1a c0       	rjmp	.+52     	; 0x470 <__vector_10+0x70>
		if (usb_configuration) {
 43c:	80 91 00 01 	lds	r24, 0x0100
 440:	88 23       	and	r24, r24
 442:	b1 f0       	breq	.+44     	; 0x470 <__vector_10+0x70>
			t = debug_flush_timer;
 444:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 448:	88 23       	and	r24, r24
 44a:	91 f0       	breq	.+36     	; 0x470 <__vector_10+0x70>
				debug_flush_timer = -- t;
 44c:	81 50       	subi	r24, 0x01	; 1
 44e:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 452:	88 23       	and	r24, r24
 454:	69 f4       	brne	.+26     	; 0x470 <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__vector_10+0x62>
						UEDATX = 0;
 45e:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 462:	80 91 e8 00 	lds	r24, 0x00E8
 466:	85 fd       	sbrc	r24, 5
 468:	fa cf       	rjmp	.-12     	; 0x45e <__vector_10+0x5e>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 46a:	8a e3       	ldi	r24, 0x3A	; 58
 46c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
 4a8:	df 93       	push	r29
 4aa:	cf 93       	push	r28
 4ac:	0f 92       	push	r0
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4b2:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4b6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4ba:	83 ff       	sbrs	r24, 3
 4bc:	1c c1       	rjmp	.+568    	; 0x6f6 <__vector_11+0x278>
                bmRequestType = UEDATX;
 4be:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 4c2:	50 91 f1 00 	lds	r21, 0x00F1
                wValue = UEDATX;
 4c6:	00 91 f1 00 	lds	r16, 0x00F1
 4ca:	10 e0       	ldi	r17, 0x00	; 0
                wValue |= (UEDATX << 8);
 4cc:	20 91 f1 00 	lds	r18, 0x00F1
 4d0:	92 2f       	mov	r25, r18
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 2b       	or	r16, r24
 4d6:	19 2b       	or	r17, r25
                wIndex = UEDATX;
 4d8:	80 91 f1 00 	lds	r24, 0x00F1
 4dc:	e8 2e       	mov	r14, r24
 4de:	ff 24       	eor	r15, r15
                wIndex |= (UEDATX << 8);
 4e0:	20 91 f1 00 	lds	r18, 0x00F1
 4e4:	92 2f       	mov	r25, r18
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	e8 2a       	or	r14, r24
 4ea:	f9 2a       	or	r15, r25
                wLength = UEDATX;
 4ec:	20 91 f1 00 	lds	r18, 0x00F1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
                wLength |= (UEDATX << 8);
 4f2:	60 91 f1 00 	lds	r22, 0x00F1
 4f6:	96 2f       	mov	r25, r22
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	28 2b       	or	r18, r24
 4fc:	39 2b       	or	r19, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4fe:	82 ef       	ldi	r24, 0xF2	; 242
 500:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 504:	56 30       	cpi	r21, 0x06	; 6
 506:	09 f0       	breq	.+2      	; 0x50a <__vector_11+0x8c>
 508:	53 c0       	rjmp	.+166    	; 0x5b0 <__vector_11+0x132>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 50a:	80 e3       	ldi	r24, 0x30	; 48
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	ac 01       	movw	r20, r24
 510:	45 50       	subi	r20, 0x05	; 5
 512:	50 40       	sbci	r21, 0x00	; 0
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 514:	fc 01       	movw	r30, r24
 516:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 518:	65 91       	lpm	r22, Z+
 51a:	74 91       	lpm	r23, Z+
				if (desc_val != wValue) {
 51c:	60 17       	cp	r22, r16
 51e:	71 07       	cpc	r23, r17
 520:	c9 f4       	brne	.+50     	; 0x554 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 522:	fa 01       	movw	r30, r20
 524:	65 91       	lpm	r22, Z+
 526:	74 91       	lpm	r23, Z+
				if (desc_val != wIndex) {
 528:	6e 15       	cp	r22, r14
 52a:	7f 05       	cpc	r23, r15
 52c:	99 f4       	brne	.+38     	; 0x554 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 52e:	4e 5f       	subi	r20, 0xFE	; 254
 530:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 532:	fa 01       	movw	r30, r20
 534:	85 91       	lpm	r24, Z+
 536:	94 91       	lpm	r25, Z+
				list += 2;
 538:	4e 5f       	subi	r20, 0xFE	; 254
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_length = pgm_read_byte(list);
 53c:	fa 01       	movw	r30, r20
 53e:	44 91       	lpm	r20, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 540:	2f 3f       	cpi	r18, 0xFF	; 255
 542:	31 05       	cpc	r19, r1
 544:	19 f0       	breq	.+6      	; 0x54c <__vector_11+0xce>
 546:	10 f0       	brcs	.+4      	; 0x54c <__vector_11+0xce>
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	24 17       	cp	r18, r20
 54e:	50 f4       	brcc	.+20     	; 0x564 <__vector_11+0xe6>
 550:	42 2f       	mov	r20, r18
 552:	08 c0       	rjmp	.+16     	; 0x564 <__vector_11+0xe6>
 554:	07 96       	adiw	r24, 0x07	; 7
 556:	49 5f       	subi	r20, 0xF9	; 249
 558:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	81 36       	cpi	r24, 0x61	; 97
 55e:	9f 07       	cpc	r25, r31
 560:	c9 f6       	brne	.-78     	; 0x514 <__vector_11+0x96>
 562:	c9 c0       	rjmp	.+402    	; 0x6f6 <__vector_11+0x278>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 564:	ae ef       	ldi	r26, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 566:	20 91 e8 00 	lds	r18, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	b9 01       	movw	r22, r18
 56e:	65 70       	andi	r22, 0x05	; 5
 570:	70 70       	andi	r23, 0x00	; 0
 572:	61 15       	cp	r22, r1
 574:	71 05       	cpc	r23, r1
 576:	b9 f3       	breq	.-18     	; 0x566 <__vector_11+0xe8>
				if (i & (1<<RXOUTI)) return;	// abort
 578:	22 fd       	sbrc	r18, 2
 57a:	c0 c0       	rjmp	.+384    	; 0x6fc <__vector_11+0x27e>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 57c:	54 2f       	mov	r21, r20
 57e:	41 32       	cpi	r20, 0x21	; 33
 580:	08 f0       	brcs	.+2      	; 0x584 <__vector_11+0x106>
 582:	50 e2       	ldi	r21, 0x20	; 32
				for (i = n; i; i--) {
 584:	9c 01       	movw	r18, r24
 586:	65 2f       	mov	r22, r21
 588:	07 c0       	rjmp	.+14     	; 0x598 <__vector_11+0x11a>
 58a:	f9 01       	movw	r30, r18
					UEDATX = pgm_read_byte(desc_addr++);
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	e4 91       	lpm	r30, Z+
 592:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 596:	61 50       	subi	r22, 0x01	; 1
 598:	66 23       	and	r22, r22
 59a:	b9 f7       	brne	.-18     	; 0x58a <__vector_11+0x10c>
 59c:	85 0f       	add	r24, r21
 59e:	91 1d       	adc	r25, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5a0:	45 1b       	sub	r20, r21
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5a2:	a0 93 e8 00 	sts	0x00E8, r26
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5a6:	44 23       	and	r20, r20
 5a8:	f1 f6       	brne	.-68     	; 0x566 <__vector_11+0xe8>
 5aa:	50 32       	cpi	r21, 0x20	; 32
 5ac:	e1 f2       	breq	.-72     	; 0x566 <__vector_11+0xe8>
 5ae:	a6 c0       	rjmp	.+332    	; 0x6fc <__vector_11+0x27e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5b0:	55 30       	cpi	r21, 0x05	; 5
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b4:	8e ef       	ldi	r24, 0xFE	; 254
 5b6:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 5ba:	c0 de       	rcall	.-640    	; 0x33c <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 5bc:	00 68       	ori	r16, 0x80	; 128
 5be:	00 93 e3 00 	sts	0x00E3, r16
			return;
 5c2:	9c c0       	rjmp	.+312    	; 0x6fc <__vector_11+0x27e>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5c4:	59 30       	cpi	r21, 0x09	; 9
 5c6:	31 f5       	brne	.+76     	; 0x614 <__vector_11+0x196>
 5c8:	44 23       	and	r20, r20
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__vector_11+0x150>
 5cc:	94 c0       	rjmp	.+296    	; 0x6f6 <__vector_11+0x278>
			usb_configuration = wValue;
 5ce:	00 93 00 01 	sts	0x0100, r16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d2:	8e ef       	ldi	r24, 0xFE	; 254
 5d4:	80 93 e8 00 	sts	0x00E8, r24
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5d8:	41 e0       	ldi	r20, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 5da:	8a e5       	ldi	r24, 0x5A	; 90
 5dc:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 5de:	40 93 e9 00 	sts	0x00E9, r20
				en = pgm_read_byte(cfg++);
 5e2:	fc 01       	movw	r30, r24
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	e4 91       	lpm	r30, Z+
				UECONX = en;
 5e8:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 5ec:	ee 23       	and	r30, r30
 5ee:	69 f0       	breq	.+26     	; 0x60a <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
 5f0:	9c 01       	movw	r18, r24
 5f2:	2f 5f       	subi	r18, 0xFF	; 255
 5f4:	3f 4f       	sbci	r19, 0xFF	; 255
 5f6:	fc 01       	movw	r30, r24
 5f8:	84 91       	lpm	r24, Z+
 5fa:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 5fe:	c9 01       	movw	r24, r18
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	f9 01       	movw	r30, r18
 604:	24 91       	lpm	r18, Z+
 606:	20 93 ed 00 	sts	0x00ED, r18
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 60a:	4f 5f       	subi	r20, 0xFF	; 255
 60c:	45 30       	cpi	r20, 0x05	; 5
 60e:	39 f7       	brne	.-50     	; 0x5de <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 610:	8e e1       	ldi	r24, 0x1E	; 30
 612:	46 c0       	rjmp	.+140    	; 0x6a0 <__vector_11+0x222>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 614:	58 30       	cpi	r21, 0x08	; 8
 616:	49 f4       	brne	.+18     	; 0x62a <__vector_11+0x1ac>
 618:	40 38       	cpi	r20, 0x80	; 128
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_11+0x1a0>
 61c:	6c c0       	rjmp	.+216    	; 0x6f6 <__vector_11+0x278>
			usb_wait_in_ready();
 61e:	8e de       	rcall	.-740    	; 0x33c <usb_wait_in_ready>
			UEDATX = usb_configuration;
 620:	80 91 00 01 	lds	r24, 0x0100
 624:	80 93 f1 00 	sts	0x00F1, r24
 628:	16 c0       	rjmp	.+44     	; 0x656 <__vector_11+0x1d8>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 62a:	55 23       	and	r21, r21
 62c:	c1 f4       	brne	.+48     	; 0x65e <__vector_11+0x1e0>
			usb_wait_in_ready();
 62e:	49 83       	std	Y+1, r20	; 0x01
 630:	85 de       	rcall	.-758    	; 0x33c <usb_wait_in_ready>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 632:	49 81       	ldd	r20, Y+1	; 0x01
 634:	42 38       	cpi	r20, 0x82	; 130
 636:	51 f4       	brne	.+20     	; 0x64c <__vector_11+0x1ce>
				UENUM = wIndex;
 638:	e0 92 e9 00 	sts	0x00E9, r14
				if (UECONX & (1<<STALLRQ)) i = 1;
 63c:	90 91 eb 00 	lds	r25, 0x00EB
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	95 ff       	sbrs	r25, 5
 644:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 646:	10 92 e9 00 	sts	0x00E9, r1
 64a:	01 c0       	rjmp	.+2      	; 0x64e <__vector_11+0x1d0>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 64c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 64e:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 652:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 656:	8e ef       	ldi	r24, 0xFE	; 254
 658:	80 93 e8 00 	sts	0x00E8, r24
 65c:	4f c0       	rjmp	.+158    	; 0x6fc <__vector_11+0x27e>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 65e:	51 30       	cpi	r21, 0x01	; 1
 660:	19 f0       	breq	.+6      	; 0x668 <__vector_11+0x1ea>
 662:	53 30       	cpi	r21, 0x03	; 3
 664:	09 f0       	breq	.+2      	; 0x668 <__vector_11+0x1ea>
 666:	47 c0       	rjmp	.+142    	; 0x6f6 <__vector_11+0x278>
		  && bmRequestType == 0x02 && wValue == 0) {
 668:	42 30       	cpi	r20, 0x02	; 2
 66a:	f9 f4       	brne	.+62     	; 0x6aa <__vector_11+0x22c>
 66c:	01 15       	cp	r16, r1
 66e:	11 05       	cpc	r17, r1
 670:	e1 f4       	brne	.+56     	; 0x6aa <__vector_11+0x22c>
			i = wIndex & 0x7F;
 672:	6e 2d       	mov	r22, r14
 674:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 676:	86 2f       	mov	r24, r22
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	84 30       	cpi	r24, 0x04	; 4
 67c:	b0 f4       	brcc	.+44     	; 0x6aa <__vector_11+0x22c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 67e:	8e ef       	ldi	r24, 0xFE	; 254
 680:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 684:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 688:	53 30       	cpi	r21, 0x03	; 3
 68a:	a9 f1       	breq	.+106    	; 0x6f6 <__vector_11+0x278>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 68c:	89 e1       	ldi	r24, 0x19	; 25
 68e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <__vector_11+0x21e>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <__vector_11+0x21a>
 6a0:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 6a4:	10 92 ea 00 	sts	0x00EA, r1
 6a8:	29 c0       	rjmp	.+82     	; 0x6fc <__vector_11+0x27e>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 6aa:	51 30       	cpi	r21, 0x01	; 1
 6ac:	21 f5       	brne	.+72     	; 0x6f6 <__vector_11+0x278>
 6ae:	41 3a       	cpi	r20, 0xA1	; 161
 6b0:	11 f5       	brne	.+68     	; 0x6f6 <__vector_11+0x278>
			if (wIndex == 0) {
 6b2:	e1 14       	cp	r14, r1
 6b4:	f1 04       	cpc	r15, r1
 6b6:	f9 f4       	brne	.+62     	; 0x6f6 <__vector_11+0x278>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6b8:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	ac 01       	movw	r20, r24
 6c2:	45 70       	andi	r20, 0x05	; 5
 6c4:	50 70       	andi	r21, 0x00	; 0
 6c6:	41 15       	cp	r20, r1
 6c8:	51 05       	cpc	r21, r1
 6ca:	b9 f3       	breq	.-18     	; 0x6ba <__vector_11+0x23c>
					if (i & (1<<RXOUTI)) return;	// abort
 6cc:	82 fd       	sbrc	r24, 2
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__vector_11+0x27e>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6d0:	82 2f       	mov	r24, r18
 6d2:	21 32       	cpi	r18, 0x21	; 33
 6d4:	08 f0       	brcs	.+2      	; 0x6d8 <__vector_11+0x25a>
 6d6:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
 6d8:	98 2f       	mov	r25, r24
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <__vector_11+0x264>
						UEDATX = 0;
 6dc:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	99 23       	and	r25, r25
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <__vector_11+0x25e>
						UEDATX = 0;
					}
					len -= n;
 6e6:	28 1b       	sub	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e8:	30 93 e8 00 	sts	0x00E8, r19
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 6ec:	22 23       	and	r18, r18
 6ee:	29 f7       	brne	.-54     	; 0x6ba <__vector_11+0x23c>
 6f0:	80 32       	cpi	r24, 0x20	; 32
 6f2:	19 f3       	breq	.-58     	; 0x6ba <__vector_11+0x23c>
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <__vector_11+0x27e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 6f6:	81 e2       	ldi	r24, 0x21	; 33
 6f8:	80 93 eb 00 	sts	0x00EB, r24
}
 6fc:	0f 90       	pop	r0
 6fe:	cf 91       	pop	r28
 700:	df 91       	pop	r29
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti

0000072c <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
 734:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 736:	21 96       	adiw	r28, 0x01	; 1
 738:	14 91       	lpm	r17, Z+
		if (!c) break;
 73a:	11 23       	and	r17, r17
 73c:	39 f0       	breq	.+14     	; 0x74c <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 73e:	1a 30       	cpi	r17, 0x0A	; 10
 740:	11 f4       	brne	.+4      	; 0x746 <print_P+0x1a>
 742:	8d e0       	ldi	r24, 0x0D	; 13
 744:	17 de       	rcall	.-978    	; 0x374 <usb_debug_putchar>
		usb_debug_putchar(c);
 746:	81 2f       	mov	r24, r17
 748:	15 de       	rcall	.-982    	; 0x374 <usb_debug_putchar>
	}
 74a:	f4 cf       	rjmp	.-24     	; 0x734 <print_P+0x8>
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	08 95       	ret

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
